init:
	.pos 0
	irmovq	stack, %rsp
	call	main
	halt

	.align 8
switch:
	.quad L5	# 0
	.quad L2	# 1
	.quad L3	# 2
	.quad L6	# 3
	.quad L2	# 4
	.quad L3	# 5

switchv:
	irmovq	$0, %r8
	irmovq	$1, %r9
	irmovq	$8, %r10
	irmovq	$5, %r11

	pushq	%rbp
	rrmovq	%rsp, %rbp
	rmmovq	%rdi, -24(%rbp)
	rmmovq	%r8, -8(%rbp)
	mrmovq	-24(%rbp), %rax

	andq	%rdi, %rdi
	jle	L2
	rrmovq	%rdi, %rax
	subq	%r11, %rax
	jg	L2
	rrmovq	%rdi, %rax
	irmovq	$0, %rcx	# address offset (array offset)
loop:
	andq	%rax, %rax
	je	L4
	addq	%r10, %rcx
	subq	%r9, %rax
	jmp	loop
L4:
	jmp	switch(%rcx)
L5:
	irmovq	$2730, %rax
	jmp	L7
L3:
	irmovq	$3003, %rax
	jmp	L7
L6:
	irmovq	$3276, %rax
	jmp	L7
L2:
	irmovq	$3549, %rax
L7:
	popq	%rbp
	ret

main:
	irmovq	$0, %r8
	irmovq	$1, %r9
	irmovq	$8, %r10
	irmovq	$6, %r11

	pushq	%rbp
	rrmovq	%rsp, %rbp
	irmovq	$96, %rax
	subq	%rax, %rsp

	rrmovq	%r8, %rax
	rmmovq	%rax, -8(%rbp)
	irmovq	$-1, %rax
	rmmovq	%rax, -88(%rbp)
	jmp	L10
L11:
	mrmovq	-88(%rbp), %rax
	rrmovq	%rax, %rdi
	call	switchv
	rrmovq	%rax, %rdx
	mrmovq	-88(%rbp), %rax
	rrmovq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rax, %rcx
	addq	%rbp, %rcx	# compute (%rbp,%rax,8)	
	rmmovq	%rdx, (%rcx)

	mrmovq	-88(%rbp), %rcx
	addq	%r9, %rcx
	rmmovq	%rcx, -88(%rbp)
L10:
	mrmovq	-88(%rbp), %rcx
	subq	%r11, %rcx
	jle	L11
	rrmovq	%r8, %rax
	mrmovq	-8(%rbp), %rcx
	rrmovq	%r8, %rcx

	ret

	.pos 0xa00
stack:
